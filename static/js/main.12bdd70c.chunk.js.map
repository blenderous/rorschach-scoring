{"version":3,"sources":["components/home.component.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","src","alt","Component","cardNo","handleOnChange","e","target","value","App","exact","path","render","scope","rowSpan","Form","Group","controlId","Control","as","onChange","type","id","Button","variant","onClick","undefined","console","log","parentNode","previousSibling","inputs","getElementsByTagName","tr","document","createElement","firstTd","nodeFirst","createTextNode","appendChild","i","length","td","node","tbody","querySelector","trLast","insertBefore","gatherFormData","tableToXlsx","selectElement","removeChild","wb","XLSX","utils","table_to_book","sheet","wbout","write","bookType","bookSST","saveAs","Blob","s","buf","ArrayBuffer","view","Uint8Array","charCodeAt","s2ab","downloadXLSX","component","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12bdd70c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div className=\"home-component\">\n                <main>\n                    <h2>Home Component</h2>\n                    <div className=\"container\">\n                        <Link to=\"/\"><img src=\"logo-ahana.png\" alt=\"\"/></Link>\n                    </div>\n                </main>\n            </div>\n        )\n    }\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Home from './components/home.component';\n// import Root from './components/root.component';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport XLSX from '../node_modules/xlsx/xlsx';\nimport { saveAs } from 'file-saver';\nlet cardNo = \"I\"\n\nfunction gatherFormData(e) {\n  // Adding things to the table by reading inputs\n  if (e !== undefined) {\n    console.log(e.target.parentNode.previousSibling);\n    let inputs = e.target.parentNode.previousSibling.getElementsByTagName('input');\n    let tr = document.createElement(\"tr\");\n    let firstTd = document.createElement(\"td\");\n    let nodeFirst = document.createTextNode(cardNo);\n    firstTd.appendChild(nodeFirst);\n    tr.appendChild(firstTd);\n    for (let i = 0; i < inputs.length; i++){\n      let td = document.createElement(\"td\");\n      let node = document.createTextNode(inputs[i].value);\n      td.appendChild(node);\n      tr.appendChild(td);\n    }\n    let tbody = document.querySelector('table tbody');\n    let trLast = document.querySelector('table tbody tr:last-child');\n    // insert the row of values before the row of input TDs\n    tbody.insertBefore(tr,trLast)\n  }\n}\n\nfunction handleOnChange(e) {\n  cardNo = e.target.value;\n}\n\nfunction downloadXLSX() {\n  let tableToXlsx = document.getElementsByTagName('table')[0];\n  let selectElement = tableToXlsx.querySelector('select')\n  selectElement.parentNode.removeChild(selectElement);\n  let wb = XLSX.utils.table_to_book(tableToXlsx, {sheet:\"Sheet JS\"});\n  let wbout = XLSX.write(wb, {bookType:'xlsx', bookSST:true, type: 'binary'});\n  function s2ab(s) {\n    let buf = new ArrayBuffer(s.length);\n    let view = new Uint8Array(buf);\n    for (let i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;\n    return buf;\n  }\n  saveAs(new Blob([s2ab(wbout)],{type:\"application/octet-stream\"}), 'test.xlsx');\n}\n\nfunction App() {\n  // const icon = this.state.buttonstate ? 'images/image1.png' : 'images/image2.jpg';\n  // return <div className=\"layer5\">\n  //   <a href=\"#\" onClick={this.handleClick.bind(this)}>\n  //     <img src={icon}/>\n  //   </a>\n  // </div>;\n  // }\n  return (\n    <Router>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <nav>\n          <ul>\n            <li><Link className=\"App-link\" to=\"/home\">Navigate to home</Link></li>\n            <li><Link className=\"App-link\" to=\"/\">Navigate back to root</Link></li>\n          </ul>\n        </nav>\n      </header>\n        <Switch>\n          <Route exact path=\"/\"  render= {() => (\n            <div className=\"root-component\">\n            <main>\n            <h2>Recording Responses from Rorschach Inkblot Tests</h2>\n            <div className=\"table-container container\">\n                <table className=\"table table-striped table-responsive-lg\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">Card no.</th>\n                            <th scope=\"col\">No. of Responses</th>\n                            <th scope=\"col\">Position of the Card</th>\n                            <th scope=\"col\">Response</th>\n                            <th scope=\"col\">Reaction Time</th>\n                            <th scope=\"col\">Total Time</th>\n                            <th scope=\"col\">Location</th>\n                            <th scope=\"col\">Determinant</th>\n                            <th scope=\"col\">Content</th>\n                            <th scope=\"col\">P/O</th>\n                            <th scope=\"col\">FLR</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                          <tr>\n                            <td rowSpan=\"1\">\n                            <Form.Group controlId=\"control-select-01\">\n                              <Form.Control as=\"select\" onChange={handleOnChange}>\n                                <option>I</option>\n                                <option>II</option>\n                                <option>III</option>\n                                <option>IV</option>\n                                <option>V</option>\n                                <option>VI</option>\n                                <option>VII</option>\n                                <option>VIII</option>\n                                <option>IX</option>\n                                <option>X</option>\n                              </Form.Control>\n                            </Form.Group>\n                            </td>\n                            <td>\n                              <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control\" id=\"input01\"/>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control\" id=\"input02\"/>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control\" id=\"input03\"/>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control\" id=\"input04\"/>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control\" id=\"input05\"/>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control\" id=\"input06\"/>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control\" id=\"input07\"/>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control\" id=\"input08\"/>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control\" id=\"input09\"/>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"form-group\">\n                                <input type=\"text\" className=\"form-control\" id=\"input10\"/>\n                              </div>\n                            </td>\n                          </tr>\n                    </tbody>\n                </table>\n              <p>\n                  <Button variant=\"primary\" onClick={(e) => gatherFormData(e)}>\n                      Add Response\n                  </Button>\n              </p>\n              <p>\n                  <Button variant=\"primary\" onClick={(e) => downloadXLSX(e)}>\n                      Export as .xlsx\n                  </Button>\n              </p>\n            </div>\n            <div className=\"icon-container container\">\n                <Link to=\"/\"><img src=\"logo-ahana.png\" alt=\"\"/></Link>\n            </div>\n            </main>\n          </div>\n          )}/>\n          <Route path=\"/home\" component={Home}/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}